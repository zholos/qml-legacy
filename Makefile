# Make configuration arguments:
#   make PLATFORM=l32               (default is autodetected)
#   make CC=gcc42                   (default is gcc)
#   make FC=i486-linux-gnu-gfortran (default is derived from CC)
#

ifneq "$(filter MINGW% CYGWIN%,$(shell uname -s))" ""
    PLATFORM=$(if $(filter %WOW64,$(shell uname -s)),w64,w32)
else ifeq "$(shell uname -s)" "Linux"
    PLATFORM=$(if $(filter x86_64,$(shell uname -m)),l64,l32)
else ifeq "$(shell uname -s)" "Darwin"
    PLATFORM=$(if $(filter x86_64,$(shell uname -m)),m64,m32)
else ifeq "$(shell uname -s)" "SunOS"
    PLATFORM=$(if $(filter i386,$(shell isainfo)),v,s)$(shell isainfo -b)
endif

ifeq "$(filter w32 w64 l32 l64 m32 m64 v32 v64 s32 s64,$(PLATFORM))" ""
    ifneq "$(PLATFORM)" ""
        $(error PLATFORM=$(PLATFORM) is not valid)
    endif
    $(error couldn't determine platform, please set PLATFORM variable)
endif

$(info PLATFORM=$(PLATFORM))

PLATFORMCLASS=$(subst v,s,$(subst 64,,$(subst 32,,$(PLATFORM))))
PLATFORMBITS=$(if $(filter %64,$(PLATFORM)),64,32)


#
# Compiler and flags
#

# CDEFS and COPTS control what code is generated by gcc.
# CFLAGS, FFLAGS and XCFLAGS are necessary to make, respectively, C objects,
# Fortran object, and C binaries that run as part of the build process, in the
# correct format.

CDEFS=
COPTS=-std=gnu99 -O2 -fno-strict-aliasing \
      -Wall -Wno-parentheses -Wno-uninitialized
FOPTS=-O2
FLAGS=-pipe -march=native
CFLAGS=$(FLAGS)
FFLAGS=$(FLAGS) -fno-f2c -frecursive
       # -frecursive is necessary for thread-safety
XCFLAGS=-pipe
FLOADFLAGS=

OBJEXT=o
ifeq "$(PLATFORMCLASS)" "w"
    DLLEXT=dll
    EXEEXT=.exe
    FLAGS+= -mno-cygwin
else
    DLLEXT=so
    EXEEXT=
    FLAGS+= -fPIC
endif
FLAGS+= -m$(PLATFORMBITS)
# XCFLAGS doesn't need -m64, and Cygwin gcc doesn't accept -m64.

SOFLAGS=
ENVFLAGS=
ifeq "$(PLATFORMCLASS)" "m"
    SOFLAGS+= -bundle -undefined dynamic_lookup -nodefaultlibs -Wl,-x
    ENVFLAGS+= MACOSX_DEPLOYMENT_TARGET=10.4
else ifeq "$(PLATFORMCLASS)" "s"
    SOFLAGS+= -G -Wl,-s,-Bsymbolic
else
    SOFLAGS+= -shared -Wl,-s,-Bsymbolic
endif

CC=$(TOOLPREFIX)gcc$(GCCSUFFIX)
FC=$(subst gcc,gfortran,$(CC))
XCC=$(CC)
LD=$(TOOLPREFIX)ld
AR=$(TOOLPREFIX)ar
RANLIB=$(TOOLPREFIX)ranlib
DLLTOOL=$(TOOLPREFIX)dlltool
NM=$(TOOLPREFIX)nm
SEDI=sed -i.tmp

# On Windows we want a more familiar POSIX environment for ATLAS xconfig etc.
ifeq "$(PLATFORMCLASS)" "w"
    ifeq "$(patsubst MINGW%,,$(shell uname -s).)" ""
        XCC=i686-pc-msys-gcc
    else ifeq "$(patsubst CYGWIN%,,$(shell uname -s).)" ""
        TOOLPREFIX=$(if $(filter 64,$(PLATFORMBITS)),x86_64,i686)-w64-mingw32-
        XCC=gcc
        FLOADFLAGS=-static
    endif
endif

$(info CC=$(CC))
$(info FC=$(FC))
$(info XCC=$(XCC))
$(info LD=$(LD) (etc))
$(info COPTS=$(COPTS))
$(info CFLAGS=$(CFLAGS))
$(info FFLAGS=$(FFLAGS))
$(info XCFLAGS=$(XCFLAGS))
$(info )


cc=$(CC) $(CDEFS) $(COPTS) $(CFLAGS) $(2) -c $(1)
fc=$(FC)          $(FOPTS) $(FFLAGS) $(2) -c $(1)
ar=$(AR) r $(1).a $(2)
ccdll=$(ENVFLAGS) $(CC) $(CDEFS) $(4) $(COPTS) $(CFLAGS) $(SOFLAGS)
ifeq "$(PLATFORMCLASS)" "l"
    ccdll+= -Wl,--version-script,$(1).mapfile
endif
ifeq "$(PLATFORMCLASS)" "m"
    ccdll+= -exported_symbols_list $(1).symlist
endif
ifeq "$(PLATFORMCLASS)" "s"
ccdll+= -Wl,-M,$(1).mapfile
endif
ccdll+= -o $(1).$(DLLEXT) $(2) $(3)
ccexe=$(ENVFLAGS) $(CC) $(CDEFS) $(4) $(COPTS) $(CFLAGS) 
ccexe+= -o $(1)$(EXEEXT) $(2) $(3)
ifneq "$(shell which curl 2>/dev/null)" ""
    fetch=curl -RLo $(1) '$(2)'
else
    fetch=wget -O $(1) '$(2)'
endif

# Without this, our command-line variables will propagate to override all
# makefiles, even through configure scripts.
MAKEOVERRIDES=


#
# Main build target
#

.PHONY: all
all: $(PLATFORM)/qml.$(DLLEXT)


#
# Download external libraries
#

SOURCEFORGE_DIR=http://prdownloads.sourceforge.net
NETLIB_DIR=http://www.netlib.org

CPROB_SRC=$(NETLIB_DIR)/cephes/cprob.tgz

ATLAS_SRC=$(SOURCEFORGE_DIR)/math-atlas/Developer%20%28unstable%29/3.9.46/atlas3.9.46.tar.bz2
LAPACK_SRC=$(NETLIB_DIR)/lapack/lapack-3.3.0.tgz

CONMAX_F=$(NETLIB_DIR)/opt/conmax.f

Q_DIR=http://kx.com/q
K_H=$(Q_DIR)/c/c/k.h
Q_LIB=$(Q_DIR)/$(PLATFORM)/q.lib

download:
	mkdir $@

download/$(PLATFORM): | download
	mkdir $@

download/cprob.tgz: | download
	$(call fetch,$@,$(CPROB_SRC))

download/k.h: | download
	$(call fetch,$@,$(K_H))

download/$(PLATFORM)/q.lib: | download/$(PLATFORM)
	$(call fetch,$@,$(Q_LIB))

download/atlas-3.9.46.tar.bz2: | download
	$(call fetch,$@,$(ATLAS_SRC))

download/lapack.tgz: | download
	$(call fetch,$@,$(LAPACK_SRC))

download/conmax.f: | download
	$(call fetch,$@,$(CONMAX_F))


#
# Build Cephes library
#

cephes/.extracted: download/cprob.tgz
	mkdir -p cephes
	tar xzf download/cprob.tgz -C cephes
	touch $@

cephes/.patched: cephes/.extracted
	$(SEDI) -e '/#[[:space:]]*define[[:space:]]\{1,\}UNK/d' \
	    -e '$${p;s/.*/#define IBMPC 1/;}' cephes/mconf.h
	$(SEDI) -e 's/erf/c_erf/g' \
	    -e '1{h;s/.*/extern double c_erf(double), c_erfc(double);/p;g;}' \
	    cephes/ndtr.c
	$(SEDI) -e 's/y01/y0/g;/double  *igami(/{:a' \
	    -e 's/{/&if(y0<=0||y0>=1)return(NAN);/;t b' -e 'N;b a' -e ':b' \
	    -e '};' cephes/igami.c
	$(SEDI) -e 's/\(for *( *i *= *0; *i *< *\)1\(00 *;\)/\15\2/' \
	    cephes/incbi.c
	for file in cephes/*.h; do \
	    $(SEDI) -e 's/true_gamma/gamma/g' "$$file"; done
	for file in $(filter-out %/const.c,$(wildcard cephes/*.c)); do \
	    $(SEDI) -e 's/true_gamma/gamma/g' \
	        -e 's/char st\{0,1\}\[\]="[[:alnum:]][[:alnum:]]*";//g' \
	        -e 's/mtherr *( *["sf][^,]*, *PLOSS *)//g' \
	        -e 's/mtherr *( *["sf][^,]*,[^)]*)/return(NAN)/g' \
	        -e '1{h;s/.*/extern double NAN;/p;g;}' "$$file"; done
	$(SEDI) -n -e 'H;$${x;' \
	    -e 's/( *!isfinite(x) *)/(x==INFINITY||x==-INFINITY)/g' \
	    -e 's/\(extern  *\)\{0,1\}int  *sgngam[^;]*;//g' \
	    -e 's/double  *gamma([^)]*)[^;][^{]*{/&int sgngam;/g' \
	    -e 's/double  *lgam([^)]*)[^;][^{]*{/&int sgngam;/g' \
	    -e 'p;}' cephes/gamma.c
	$(SEDI) -e '/if *( *n *<= *0[^0-9]/{N' \
	    -e 's/\(return *(\)-1\.[^)]*/\1NAN/;};/^ *kolmogorov *(/{:a' \
	    -e 's/{/&if(y<.12)return 1;/;t b' -e 'N;b a' -e ':b' -e '}' \
	    cephes/kolmogorov.c
	rm -f cephes/mtherr.c
	touch $@

cephes/.built: cephes/.patched
	cd cephes && $(call cc,*.c,-ffloat-store)
	cd cephes && $(call ar,cephes,*.$(OBJEXT))
	$(RANLIB) cephes/cephes.a
	touch $@

lib:
	mkdir $@

lib/cephes.a: cephes/.built | lib
	cp cephes/cephes.a $@


#
# Install q glue
#

include:
	mkdir $@

include/k.h: download/k.h | include
	sed -e '/#define  *isnan/d;$${p;s/.*//;}' $< >$@

qlib/q.def: download/$(PLATFORM)/q.lib
	mkdir -p qlib
	$(NM) $< | awk "/^[[:alnum:].]+:/&&!name[1]\
	    {split(\$$1,name,\":\");print\"NAME\",name[1];print\"EXPORTS\"}\
	    /[[:space:]]T[[:space:]]+_?[[:alnum:]]/{sub(\"^_\",\"\",\$$3);\
	    print \$$3;c=1}END{exit !c}" >$@.tmp
	mv $@.tmp $@

qlib/q.a: qlib/q.def
	$(DLLTOOL) -d $< -l $@

lib/q.a: qlib/q.a | lib
	cp $< $@


#
# Build ATLAS and LAPACK libraries
#

atlas/.extracted: download/atlas-3.9.46.tar.bz2
	mkdir -p atlas
	tar xjf $< -C atlas
	touch $@

atlas/.patched: atlas/.extracted
	$(SEDI) -f patch/atlas-ilaenv.sed \
	    atlas/ATLAS/interfaces/lapack/F77/src/ilaenv.f
	patch -p0 -d atlas <patch/atlas-config.patch
	patch -p0 -d atlas <patch/atlas-lapack.patch
	$(SEDI) 's/- \(cd .* \/F77\)/\1/' atlas/ATLAS/makes/Make.bin
	$(SEDI) '/char  *[[:alpha:]]/s/\[[0-9]\{1,5\}\]/[100000]/g' \
	    atlas/ATLAS/CONFIG/src/config.c \
	    atlas/ATLAS/CONFIG/src/atlconf_misc.c
    ifeq "$(PLATFORM)" "w64"
	$(SEDI) 's/-DATL_OS_/-DATL_USE64BITS &/' \
	    atlas/ATLAS/CONFIG/src/probe_*.c
	$(SEDI) -e '/\(int\|void\) \(asm_probe\|do_vsum\|do_cpuid\)/{' \
	    -e 's//\1 __attribute__((__sysv_abi__)) \2/;}' \
	    atlas/ATLAS/CONFIG/src/backend/probe_*.c \
	    atlas/ATLAS/CONFIG/src/backend/archinfo_x86.c
	$(SEDI) -e 's/\(asmb *=\).*/\1 0;/' \
	    atlas/ATLAS/CONFIG/src/SpewMakeInc.c
    endif
	$(SEDI) 's:(F77).*backend/[^ ]*F\.f:& $(FLOADFLAGS):' \
	    atlas/ATLAS/CONFIG/src/Makefile
	$(SEDI) -e 's:`echo "\$$arg" | sed -e "s/\(--[^/]*\)//"`:$${arg#\1}:' \
	    -e 's:`echo "\$$arg" | sed -e "s/\^* +\$$*//"`:$$arg:' \
	    atlas/ATLAS/configure
	$(SEDI) -e '1{h;s/.*/include make.inc.qml/p;g;}' \
	    -e '/^ *XCC *=/d;/^ *XCFLAGS *=/d' \
	    -e '/^ *CCFLAGS *=/{p;s/^C/X/;s/(\(CFLAGS)\)/(_X\1/;}' \
	    atlas/ATLAS/CONFIG/src/Makefile
	touch $@

atlas/.configured: atlas/.patched
	mkdir -p atlas/build
	{ echo 'CC=$(CC)'; echo 'CFLAGS=$(CFLAGS)'; \
	    echo 'XCC=$(XCC)'; echo '_XCFLAGS=$(XCFLAGS)'; } \
	    >atlas/build/make.inc.qml
	cd atlas/build && \
	    ../ATLAS/configure -v 2 -t 0 -b $(PLATFORMBITS) \
	    $(if $(filter w,$(PLATFORMCLASS)),-D c -DWALL) \
	    $(if $(filter w64,$(PLATFORM)),-Si archdef 0) \
	    -C ac $(CC)    -Fa acg '$(CFLAGS)' \
	    -C if $(FC)    -Fa if  '$(FFLAGS)' \
	    -C xc $(XCC)   -Fa xc '$(XCFLAGS)' \
	     --cc=$(XCC) --cflags='$(XCFLAGS)' \
	    --prefix=../install
	$(SEDI) '/^ *SHELL *=/d;/FLAGS *=/s/-O[1 ]/-O2 /' \
	    atlas/build/Make.inc
	{ echo; echo 'ARCHIVER=$(AR)'; echo 'RANLIB=$(RANLIB)'; } \
	    >>atlas/build/Make.inc
	touch $@

atlas/.built: atlas/.configured
	make -C atlas/build build install
	touch $@

atlas/.checked: atlas/.built
	make -C atlas/build check
	touch $@

# Combine ATLAS and LAPACK into one library. ATLAS configure can do this as well
# (--with-netlib-lapack), but that complicates the dependencies. Combining
# liblapack.a and libf77blas.a ensures that ATLAS routines replace LAPACK
# routines regardless of which library they are in (e.g. LSAME).

atlas/.combined: lapack/.built atlas/.built
	mkdir -p atlas/combine
	cp lapack/lapack_LINUX.a atlas/combine/alapack.a
	cd atlas/combine $(foreach lib,atlas cblas f77blas lapack, \
	    && $(AR) x ../install/lib/lib$(lib).a)
	cd atlas/combine && $(AR) r alapack.a *.o
	$(RANLIB) atlas/combine/alapack.a
	touch $@


lapack/.extracted: download/lapack.tgz
	mkdir -p lapack
	tar xzf $< -C lapack
	mv lapack/lapack-*/* lapack/
	touch $@

lapack/.patched: lapack/.extracted
	$(SEDI) -e '/^ *SHELL *=/d' \
	    -e '/^ *\(FORTRAN\)*\(LOADER\)* *=/{s/gfortran/$$(FC)/;s/ -g//;}' \
	    -e '/^ *LOADOPTS *=/s/$$/ $$(OPTS) $(FLOADFLAGS)/' \
	    lapack/make.inc.example
	$(SEDI) -f patch/lapack-builtin.sed $(addprefix lapack/SRC/, \
	    dormqr.f dormbr.f dormlq.f dormhr.f dgesvd.f dhseqr.f \
	    zhseqr.f zunmhr.f zunmqr.f dlasd0.f dlalsa.f dlasda.f)
	touch $@

lapack/make.inc.flags: atlas/.configured
	sed -n -e '/ICCFLAGS *=/{s//OPTS= /;s/ $$(CDEFS)/ $$(FFLAGS)/;p;}' \
	    -e '/F77FLAGS *=/s//NOOPT=/p' atlas/build/Make.inc >$@.tmp
	mv $@.tmp $@

lapack/.configured: lapack/.patched lapack/make.inc.flags
	cp lapack/make.inc.example lapack/make.inc
	{ echo; echo 'FC=$(FC)'; echo 'FFLAGS=$(FFLAGS)'; \
	    echo 'ARCH=$(AR)'; echo 'RANLIB=$(RANLIB)'; } >>lapack/make.inc
	cat lapack/make.inc.flags >>lapack/make.inc
	touch $@

lapack/.built: lapack/.configured
	make -C lapack lapacklib
	touch $@


include/cblas.h include/clapack.h: atlas/.built | include
	cp atlas/install/include/$(notdir $@) $@

lib/alapack.a: atlas/.combined | lib
	cp atlas/combine/alapack.a $@


# Build conmax
conmax/conmax.f: download/conmax.f
	mkdir -p conmax
	sed -f patch/conmax.sed $< >$@.tmp
	mv $@.tmp $@

conmax/conmax.a: conmax/conmax.f
	cd conmax && $(call fc,conmax.f,-ffloat-store)
	cd conmax && $(call ar,conmax,conmax.$(OBJEXT))
	$(RANLIB) $@

lib/conmax.a: conmax/conmax.a | lib
	cp $< $@


#
# Build QML
#

VERSION=0.3.9

SOURCES=qml.c
INCLUDES=include/k.h include/cblas.h include/clapack.h
LIBS=
ifeq "$(PLATFORMCLASS)" "w"
    LIBS+= lib/q.a
endif
LIBS+= lib/cephes.a lib/alapack.a lib/conmax.a

build/qml.symlist: qml.c
	mkdir -p build
	sed -n -e 's/^wrap_[ifF_]*(\([_[:alnum:]]\{1,\}\)[ ,)].*/_qml_\1/p' \
	    -e 's/^\(qml_[_[:alnum:]]\{1,\}\).*/_\1/p' $< >$@

build/qml.mapfile: build/qml.symlist
	{ echo '{ global:'; sed -e 's/^_/    /;s/$$/;/' $<; \
	    echo '  local: *; };'; } >$@

build/qml.$(DLLEXT): $(SOURCES) $(INCLUDES) $(LIBS) \
                     build/qml.mapfile build/qml.symlist
	mkdir -p build
	cd build && $(call ccdll,qml, \
	    $(addprefix ../,$(SOURCES)), \
	    $(addprefix ../,$(LIBS)), \
	    -I../include -DQML_VERSION=$(VERSION))

$(PLATFORM)/qml.$(DLLEXT): build/qml.$(DLLEXT)
	mkdir -p $(PLATFORM)
	cp $< $@

.PHONY: test
test: all
	q test.q -s 16

check: atlas/.checked test


#
# Create distributable archive
#

DIST=LICENSE.txt LICENSE_Q.txt README.txt CHANGES.txt \
    Makefile patch qml.c qml.q test.q

.PHONY: dist
dist:
	rm -f 'qml-$(VERSION).zip'
	7z a -tzip -mx=9 'qml-$(VERSION).zip' $(DIST)


#
# Clean up
#

.PHONY: cleanpart clean distclean
cleanpart:
	rm -rf cephes conmax qlib include lib bin build

# These two take much longer to build, sometimes we want to keep them.
clean: cleanpart
	rm -rf atlas lapack

distclean: clean
	rm -rf download '$(PLATFORM)'
	rm -f 'qml-$(VERSION).zip'
